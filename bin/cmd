#!/bin/sh
cmd=${1?\$1 needs to be command name}
prefix="$HOME"/.config
scriptdir="$prefix"/bin
script="$scriptdir/$cmd"
mandir="$prefix"/share/man/man1
man="$mandir/$cmd.1"

search() {
  IFS=:
  for p in $PATH ; do
    case "$p" in
    ($scriptdir) ;;
    (*) if test -x "$p/$1"; then
          echo "$p/$1";
          return;
        fi
    esac
  done
}

template() {
  old=$(search "$1")
  if test -n "$old"; then
    case "$(head -n 1 "$old")" in
    ("#!/bin/sh")
      cat "$old";;
    (*)
      printf '#!/bin/sh\nexec %s "$@"\n' "$old";;
    esac
  else
    printf '#!/bin/sh\n'
  fi
}

man_template() {
  cat <<EOF
.Dd \$Mdocdate\$
.Dt $1 1
.Os
.Sh NAME
.Nm $1
.Nd do something
.Sh SYNOPSIS
.Nm
.Fl flag
.Ar argument
.Op Fl optional-flag
.Op Ar optional-argument
.Sh DESCRIPTION
The
.Nm
utility processes files ...
.Sh ENVIRONMENT
.Sh FILES
.Sh EXIT STATUS
.Sh EXAMPLES
.Sh DIAGNOSTICS
.Sh SEE ALSO
.Xr foobar 1
.Sh STANDARDS
.Sh HISTORY
.Sh AUTHORS
The
.Nm
reference was written by
.An $(git config user.name) Aq Mt $(git config user.email) .
.Sh CAVEATS
.Sh BUGS
.Sh SECURITY CONSIDERATIONS
EOF
}

reference=$(mktemp)
template "$cmd" >"$reference"

if ! test -e "$script"; then
  cp "$reference" "$script"
fi
chmod +x "$script"

${VISUAL:-vi} "$script"

# delete if equal to template or empty
if cmp -s "$reference" "$script" || ! test -s "$script"; then
  rm "$script"
  rm "$man"
fi

rm "$reference"

if test -e "$script"; then
  test -e "$man" || man_template "$cmd" > "$man"
  ${VISUAL:-vi} "$man"
fi
