#!/bin/sh
# Syntax: view (url | path)
# Figure out how to display a file.
# also, downloaded files are cached, so i can view them again for two days
# without having to re-download them.
# usually this spawns a window that needs to be manually closed.

# create a temporary file to store contents in
cachefile() {
  hash=$(printf "%s" "$1"|sed 's/^.*\/\///;s/[^a-zA-Z0-9\%\-\@\^\.]/_/g;s/__+/_/g')
  name="${XDG_CACHE_HOME:-$HOME/.cache}"/urls/"$hash"
  mkdir -p "${name%/*}"
  printf "%s\n" "$name"
}

# long-running commands that require xorg
x11() {
  test -n "$DISPLAY" || return
  printf '%s\n' "$type"|grep -qiE "$1" || return
  shift
  command -v "$1" >/dev/null 2>&1 || return
  setsid "$@" &
  sleep 1
  exit
}

# long-running commands that require wayland
way() {
  test -n "$WAYLAND_DISPLAY" || return
  printf '%s\n' "$type"|grep -qiE "$1" || return
  shift
  command -v "$1" >/dev/null 2>&1 || return
  setsid "$@" &
  sleep 1
  exit
}

# long-running commands
cmd() {
  printf '%s\n' "$type"|grep -qiE "$1" || return
  shift
  command -v "$1" >/dev/null 2>&1 || return
  exec "$@"
}

# commands that dump presentation to stdout and exit
dmp() {
  printf '%s\n' "$type"|grep -qiE "$1" || return
  shift
  command -v "$1" >/dev/null 2>&1 || return
  (
    printf "[%s]\n" "$type"
    "$@"
  ) | less
  exit 0
}

# delete older files so they dont pile up
find "${XDG_CACHE_HOME:-$HOME/.cache}"/urls -mtime +2 -delete 2>/dev/null

if test "$1" = "-" ; then
  url=$(head -n 1)
else
  url="$1"
fi

case "$url" in
(ISBN*)
  url="isbn:$(printf "%s" "$url"|grep -o -E "[0-9\-]{10,}")"
  ;;
(10.1*/*-*|10.1*/*.*)
  url="doi:${url}"
  ;;
esac

# some urls have special handling
case "$url" in
https://www.youtube.com/watch?v=*|https://youtu.be/*|https://hooktube*)
  exec mpv --loop=inf "$url"
  ;;
file://*)
  file="${url#file://}"
  ;;
/*)
  file="$url"
  url="file://$url"
  ;;
*://*|doi:*|isbn:*)
  file=$(cachefile "$url")
  if ! test -s "$file"; then
    wget -O "${file}.$$" "$url" && mv "${file}.$$" "${file}" || rm "${file}.$$"
  fi
  ;;
*)
  file="$PWD/$url"
  url="file://$PWD/$url"
  ;;
esac

if ! test -s "$file" || ! test -f "$file"; then
  echo "Failed to access file: ${url}" >&1
  head -n 1
  exit 1
fi

type=$(file -z -L -b "$file")
echo "$type"

# x11 = requires xorg
# way = requires wayland
# cmd = tui application
# dmp = displayed by converting to text, piped into less
# First match wins

x11 'PDF document' mupdf-gl -I "$file"
x11 'PDF document' mupdf -I "$file"
way 'HTML document|PDF document' firefox "$url"
x11 'HTML document|PDF document' firefox "$url"
x11 'HTML document' qutebrowser "$url"
cmd 'HTML document' w3m -T text/html "$url"
cmd 'HTML document' lynx "$url"
dmp 'HTML document' sed -e 's/<[^>]*\(>\|$\)//g;/^\s*$/d' "$file"
cmd 'shell script' nano --view -Y sh "$file"
way 'image data' imv "$file"
way 'video|ISO Media|WebM|Matroska|GIF image data' mpv --loop-file=inf "$file"
x11 'video|ISO Media|WebM|Matroska|GIF image data' mpv --loop-file=inf "$file"
cmd 'audio|layer III' mpv --no-video --loop-file=inf "$file"
x11 'image data' feh --output-dir "$HOME" "$file"
cmd 'image data' cacaview "$file"
dmp 'tar archive' tar -tf "$file"
dmp 'PEM certificate request' openssl req -in "$file" -text -noout -verify
dmp 'PEM certificate' openssl x509 -in "$file" -text -noout
x11 'PEM certificate' gcr-viewer "$file"
dmp 'text' cat -v "$file"
dmp '.*' hexdump -Cv "$file"
